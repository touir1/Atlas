@model Atlas_frontend.Models.CompteModel

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>CompteModel</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Username" class="control-label"></label>
                <input asp-for="Username" class="form-control" />
                <span asp-validation-for="Username" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password" class="control-label"></label>
                @Html.PasswordFor(m => m.Password, new { @class="form-control" })
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                @Html.DropDownList("idUser",
                   new SelectList(ViewBag.UserList, "Id", "FullName"),
                   "Sélectionner un utilisateur",
                   new { @class = "form-control"})
                @Html.ValidationMessage("idUser","", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" /> |
                <input type="button" value="Generate random password" class="btn btn-warning" onclick="setSecurePassword()" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
<script>

    function generateSecurePassword() {
        return Array(25)
            .fill('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~!@@-#$')
            .map(x => x[Math.floor(crypto.getRandomValues(new Uint32Array(1))[0] / (0xffffffff + 1) * x.length)])
            .join('');
    }

    function setSecurePassword() {
        var result = generateSecurePassword();
        while (!checkIfPasswordSecure(result)) {
            result = generateSecurePassword();
            console.log(result);
        }
        $("#Password").val(result);
    }

    function checkIfPasswordSecure(password) {
        if (password) {
            if (/[~!@@\-#$]/.test(password)
                && /[a-z]/.test(password)
                && /[A-Z]/.test(password)
                && /[0-9]/.test(password)
                && password.length >= 8 && password.length <=30)
                return true;
        }
        return false
    }
</script>
}
